1.  input variable length string and store it in an array without
memory wastage.

#include <stdio.h>
int main(){
  char *str, c;
  int i=0,j=1;
  str = (char*)malloc(sizeof(char));
  printf("enter string : ");
  while(c != '\n'){
    c = getc(stdin);
    j++;
    str = (char*)realloc (str,sizeof(char));
    str[i]=c;
    i++;
  }
  str[i]='\0';
  printf("string = %s",str);
  free(str);

return 0;
}


2. display the average of data values.

#include <stdio.h>
main(){
  int *p , i, n, sum =0;
  printf("enter array size");
  scanf("%d",&n);
  printf("enter %d no",n);
  p = (int*)calloc(n,sizeof(int));
  if(p == NULL){
    printf("failed");
    return 0;
  }
  for(i=0;i<n;i++)
    scanf("%d",p+i);
  for(i=0;i<n;i++)
    sum = sum + *(p+i);
  printf("Average of an array element = %d",sum/n);
  free(p);
}

3.  calculate the sum of n numbers entered by the user using malloc
and free.

#include <stdio.h>
main(){
  int *p,n,i,sum=0;
  printf("enter size of an array");
  scanf("%d",&n);
  printf("enter %d no",n);
  p = (int*) malloc (n*sizeof(int));
  if(p == NULL){
    printf("failed");
    return 0;
  }
  for(i=0;i<n;i++)
    scanf("%d",(p+i));
  for(i=0;i<n;i++)
    sum = sum + *(p+i);
  printf("SUM = %d",sum);
  free(p);

}



4. input and print text using dynamic memory allocation.


#include <stdio.h>
main(){
  char *c,ch;
  int i=0,j=1;
  c = (char*) malloc (sizeof(char));
  printf("enter string :");
  while(ch != '\n'){
    ch =getc(stdin);
    j++;
    c = (char*) realloc (c,j*sizeof(char));
    c[i]=ch;
    i++;
  }
  c[i]='\0';
  printf("%s",c);
  free(c);

}



5. read a one dimensional array, print sum of all elements

#include <stdio.h>
main(){
  int *p , i, n, sum =0;
  printf("enter array size");
  scanf("%d",&n);
  printf("enter %d no",n);
  p = (int*)calloc(n,sizeof(int));
  if(p == NULL){
    printf("failed");
    return 0;
  }
  for(i=0;i<n;i++)
    scanf("%d",p+i);
  for(i=0;i<n;i++)
    sum = sum + *(p+i);
  printf("Sum of an array element = %d",sum);
  free(p);
}


6. find the largest element using Dynamic Memory Allocation.

#include <stdio.h>
main(){
  int *p , i, n, sum =0;
  printf("enter array size");
  scanf("%d",&n);
  printf("enter %d no",n);
  p = (int*)calloc(n,sizeof(int));
  if(p == NULL){
    printf("failed");
    return 0;
  }
  for(i=0;i<n;i++)
    scanf("%d",p+i);
  for(i=0;i<n;i++){
    if(*(p+0) < *(p+i)){
        *(p+0) = *(p+i);
    }
  }
  printf("largest no of an array element = %d",*(p+0));
  free(p);
}

7. demonstrate memory leak.

#include <stdio.h>
int main(){
  int *p;   
  p = (int*) malloc (sizeof(int));
  if(p == NULL){
    printf("failed to access");
    return 0;
  }
 
return 0;
}

8. demonstrate dangling pointers.

#include <stdio.h>
int main(){
  int *p;
  p = (int*) malloc(sizeof(int));
  *p=10;
  printf("before free%d\n",*p);
  free(p);
  printf("after free%d",*p);

return 0;
}

9.  handle the case when memory allocation is failed.


#include <stdio.h>
main(){
  int *p , i, n;
  printf("enter array size");
  scanf("%d",&n);
  printf("enter %d no",n);
  p = (int*)calloc(n,sizeof(int));
  if(p == NULL){
    printf("failed");
    return 0;
  }
  for(i=0;i<n;i++)
    scanf("%d",(p+i));
}


10. maximum and minimum from an array

#include <stdio.h>
main(){
  int *p , i, n, sum =0;
  printf("enter array size");
  scanf("%d",&n);
  printf("enter %d no",n);
  p = (int*)calloc(n,sizeof(int));
  if(p == NULL){
    printf("failed");
    return 0;
  }
  for(i=0;i<n;i++)
    scanf("%d",p+i);
  for(i=0;i<n;i++){
    if(*(p+0) < *(p+i)){
        *(p+0) = *(p+i);
    }
  }
  printf("Maximum no of an array element = %d",*(p+0));
  for(i=0;i<n;i++){
    if(*(p+0) > *(p+i)){
        *(p+0) = *(p+i);
    }
  }
  printf("\nMinimum no of an array element = %d",*(p+0));
  free(p);
}

